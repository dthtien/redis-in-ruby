<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Redis in Ruby</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on Redis in Ruby</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 May 2020 21:28:17 -0400</lastBuildDate>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Respond to Get and Set</title>
      <link>http://localhost:1313/post/respond-to-get-and-set/</link>
      <pubDate>Sun, 17 May 2020 21:28:17 -0400</pubDate>
      
      <guid>http://localhost:1313/post/respond-to-get-and-set/</guid>
      <description>Intro In this chapter, we&amp;rsquo;ll build on the foundations we established in the previous chapter. We now know how to start a TCP server using the built-in TCPServer class. In this chapter we&amp;rsquo;ll build a basic client using another built-in class, TCPSocket. We&amp;rsquo;ll then make the server actually usable by making it respond to two commands, GET and SET.
Let&amp;rsquo;s write some code We&amp;rsquo;re going to start by wrapping the code to start a server in a class, because this will make it easier to add functionality later on.</description>
    </item>
    
    <item>
      <title>A basic TCP server</title>
      <link>http://localhost:1313/post/basic-server/</link>
      <pubDate>Sat, 16 May 2020 15:54:30 -0400</pubDate>
      
      <guid>http://localhost:1313/post/basic-server/</guid>
      <description>What we&amp;rsquo;ll cover This chapter will cover the creation of a TCP server in ruby, as well as how to interact with it with netcat (nc), a utility bundled with macOS. We will briefly look at concurrency and parallelism and how threads can impact the behavior of our server.
Introduction The goal of this series of posts is to re-implement a Redis server, &amp;ldquo;from scratch&amp;rdquo;. At the time of this writing Redis supports 9 different data types, dozens of commands related to those data types as well as many features in the Administration category, such Redis Sentinel for High Availability.</description>
    </item>
    
  </channel>
</rss>